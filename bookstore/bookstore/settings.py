"""
Django settings for bookstore project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

import os
from dotenv import load_dotenv
import redis
import logging
import requests


load_dotenv()  # Carga las variables del archivo .env

logger = logging.getLogger(__name__)

# Try connecting to Redis
try:
    r = redis.from_url('redis://bookstore_redis:6379')
    # Ping Redis to check if it's available
    r.ping()
    logger.info("______Redis connection successful_________")
    # If Redis is available, use Redis as the cache backend
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": "redis://bookstore_redis:6379",
        }
    }
except redis.ConnectionError:
    logger.warning("_______No Redis service detected, caching is disabled________")


SEARCH_ENGINE = 'database'  # Default to using the database
OPENSEARCH_DSL = {
    'default': {
        'hosts': ['http://opensearch-node1:9200'],
    }
}

try:
    response = requests.get(f"{OPENSEARCH_DSL['default']['hosts'][0]}/_cluster/health", timeout=5)
    if response.status_code == 200:
        logger.info("______OpenSearch connection successful_________")
        SEARCH_ENGINE = 'opensearch'
    else:
        logger.warning("______OpenSearch service not responding, using database________")
except (requests.ConnectionError, requests.Timeout):
    logger.warning("______OpenSearch service not detected, using database________")
    

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-f1xq#lnp3$c&+)i7q==@4^^kol3f&z1l01k88)eilw$2_gpk1n'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

ALLOWED_HOSTS = ['*']

USE_X_FORWARDED_HOST = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_opensearch_dsl',
    'library'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "django.middleware.cache.UpdateCacheMiddleware",
    'django.middleware.common.CommonMiddleware',
    "django.middleware.cache.FetchFromCacheMiddleware",
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

#CACHE_MIDDLEWARE_ALIAS = 'bookstore_cached_page'
#CACHE_MIDDLEWARE_SECONDS = 1200 # Set to cached the site for 20 minutes

ROOT_URLCONF = 'bookstore.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bookstore.wsgi.application'

# #Opensearch
# OPENSEARCH_DSL = {
#     'default': {
#         'hosts': ['opensearch-node1:9200'],
#     }
# }


# SEARCH_ENGINE = 'opensearch' 

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_ROOT = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ------ Options to check if a component is active or not -------

# Check environment variable to decide whether to serve static files (HAProxy)

SERVE_STATIC = os.getenv('SERVE_STATIC', 'True') == 'True' # True= Django, False = Reverse Proxy

if SERVE_STATIC: 
    STATIC_URL = '/static/'
    MEDIA_URL = '/media/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
else:
    STATIC_URL = '/static/'
    MEDIA_URL = '/media/'